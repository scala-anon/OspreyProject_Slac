/**
 * @fileoverview gRPC-Web generated client stub for dp.service.annotation
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.3
// source: annotation.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pb = require('./common_pb.js')
const proto = {};
proto.dp = {};
proto.dp.service = {};
proto.dp.service.annotation = require('./annotation_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dp.service.annotation.DpAnnotationServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dp.service.annotation.DpAnnotationServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.annotation.CreateDataSetRequest,
 *   !proto.dp.service.annotation.CreateDataSetResponse>}
 */
const methodDescriptor_DpAnnotationService_createDataSet = new grpc.web.MethodDescriptor(
  '/dp.service.annotation.DpAnnotationService/createDataSet',
  grpc.web.MethodType.UNARY,
  proto.dp.service.annotation.CreateDataSetRequest,
  proto.dp.service.annotation.CreateDataSetResponse,
  /**
   * @param {!proto.dp.service.annotation.CreateDataSetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.annotation.CreateDataSetResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.annotation.CreateDataSetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.annotation.CreateDataSetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.annotation.CreateDataSetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.annotation.DpAnnotationServiceClient.prototype.createDataSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/createDataSet',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_createDataSet,
      callback);
};


/**
 * @param {!proto.dp.service.annotation.CreateDataSetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.annotation.CreateDataSetResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.annotation.DpAnnotationServicePromiseClient.prototype.createDataSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/createDataSet',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_createDataSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.annotation.QueryDataSetsRequest,
 *   !proto.dp.service.annotation.QueryDataSetsResponse>}
 */
const methodDescriptor_DpAnnotationService_queryDataSets = new grpc.web.MethodDescriptor(
  '/dp.service.annotation.DpAnnotationService/queryDataSets',
  grpc.web.MethodType.UNARY,
  proto.dp.service.annotation.QueryDataSetsRequest,
  proto.dp.service.annotation.QueryDataSetsResponse,
  /**
   * @param {!proto.dp.service.annotation.QueryDataSetsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.annotation.QueryDataSetsResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.annotation.QueryDataSetsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.annotation.QueryDataSetsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.annotation.QueryDataSetsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.annotation.DpAnnotationServiceClient.prototype.queryDataSets =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/queryDataSets',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_queryDataSets,
      callback);
};


/**
 * @param {!proto.dp.service.annotation.QueryDataSetsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.annotation.QueryDataSetsResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.annotation.DpAnnotationServicePromiseClient.prototype.queryDataSets =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/queryDataSets',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_queryDataSets);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.annotation.CreateAnnotationRequest,
 *   !proto.dp.service.annotation.CreateAnnotationResponse>}
 */
const methodDescriptor_DpAnnotationService_createAnnotation = new grpc.web.MethodDescriptor(
  '/dp.service.annotation.DpAnnotationService/createAnnotation',
  grpc.web.MethodType.UNARY,
  proto.dp.service.annotation.CreateAnnotationRequest,
  proto.dp.service.annotation.CreateAnnotationResponse,
  /**
   * @param {!proto.dp.service.annotation.CreateAnnotationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.annotation.CreateAnnotationResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.annotation.CreateAnnotationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.annotation.CreateAnnotationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.annotation.CreateAnnotationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.annotation.DpAnnotationServiceClient.prototype.createAnnotation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/createAnnotation',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_createAnnotation,
      callback);
};


/**
 * @param {!proto.dp.service.annotation.CreateAnnotationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.annotation.CreateAnnotationResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.annotation.DpAnnotationServicePromiseClient.prototype.createAnnotation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/createAnnotation',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_createAnnotation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.annotation.QueryAnnotationsRequest,
 *   !proto.dp.service.annotation.QueryAnnotationsResponse>}
 */
const methodDescriptor_DpAnnotationService_queryAnnotations = new grpc.web.MethodDescriptor(
  '/dp.service.annotation.DpAnnotationService/queryAnnotations',
  grpc.web.MethodType.UNARY,
  proto.dp.service.annotation.QueryAnnotationsRequest,
  proto.dp.service.annotation.QueryAnnotationsResponse,
  /**
   * @param {!proto.dp.service.annotation.QueryAnnotationsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.annotation.QueryAnnotationsResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.annotation.QueryAnnotationsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.annotation.QueryAnnotationsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.annotation.QueryAnnotationsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.annotation.DpAnnotationServiceClient.prototype.queryAnnotations =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/queryAnnotations',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_queryAnnotations,
      callback);
};


/**
 * @param {!proto.dp.service.annotation.QueryAnnotationsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.annotation.QueryAnnotationsResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.annotation.DpAnnotationServicePromiseClient.prototype.queryAnnotations =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/queryAnnotations',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_queryAnnotations);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.annotation.ExportDataRequest,
 *   !proto.dp.service.annotation.ExportDataResponse>}
 */
const methodDescriptor_DpAnnotationService_exportData = new grpc.web.MethodDescriptor(
  '/dp.service.annotation.DpAnnotationService/exportData',
  grpc.web.MethodType.UNARY,
  proto.dp.service.annotation.ExportDataRequest,
  proto.dp.service.annotation.ExportDataResponse,
  /**
   * @param {!proto.dp.service.annotation.ExportDataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.annotation.ExportDataResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.annotation.ExportDataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.annotation.ExportDataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.annotation.ExportDataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.annotation.DpAnnotationServiceClient.prototype.exportData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/exportData',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_exportData,
      callback);
};


/**
 * @param {!proto.dp.service.annotation.ExportDataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.annotation.ExportDataResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.annotation.DpAnnotationServicePromiseClient.prototype.exportData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.annotation.DpAnnotationService/exportData',
      request,
      metadata || {},
      methodDescriptor_DpAnnotationService_exportData);
};


module.exports = proto.dp.service.annotation;

