/**
 * @fileoverview gRPC-Web generated client stub for dp.service.query
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.3
// source: query.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pb = require('./common_pb.js')
const proto = {};
proto.dp = {};
proto.dp.service = {};
proto.dp.service.query = require('./query_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dp.service.query.DpQueryServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dp.service.query.DpQueryServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.query.QueryDataRequest,
 *   !proto.dp.service.query.QueryDataResponse>}
 */
const methodDescriptor_DpQueryService_queryData = new grpc.web.MethodDescriptor(
  '/dp.service.query.DpQueryService/queryData',
  grpc.web.MethodType.UNARY,
  proto.dp.service.query.QueryDataRequest,
  proto.dp.service.query.QueryDataResponse,
  /**
   * @param {!proto.dp.service.query.QueryDataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.query.QueryDataResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.query.QueryDataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.query.QueryDataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.query.QueryDataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.query.DpQueryServiceClient.prototype.queryData =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryData',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryData,
      callback);
};


/**
 * @param {!proto.dp.service.query.QueryDataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.query.QueryDataResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.query.DpQueryServicePromiseClient.prototype.queryData =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryData',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryData);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.query.QueryDataRequest,
 *   !proto.dp.service.query.QueryDataResponse>}
 */
const methodDescriptor_DpQueryService_queryDataStream = new grpc.web.MethodDescriptor(
  '/dp.service.query.DpQueryService/queryDataStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.dp.service.query.QueryDataRequest,
  proto.dp.service.query.QueryDataResponse,
  /**
   * @param {!proto.dp.service.query.QueryDataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.query.QueryDataResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.query.QueryDataRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.query.QueryDataResponse>}
 *     The XHR Node Readable Stream
 */
proto.dp.service.query.DpQueryServiceClient.prototype.queryDataStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dp.service.query.DpQueryService/queryDataStream',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryDataStream);
};


/**
 * @param {!proto.dp.service.query.QueryDataRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.query.QueryDataResponse>}
 *     The XHR Node Readable Stream
 */
proto.dp.service.query.DpQueryServicePromiseClient.prototype.queryDataStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/dp.service.query.DpQueryService/queryDataStream',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryDataStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.query.QueryTableRequest,
 *   !proto.dp.service.query.QueryTableResponse>}
 */
const methodDescriptor_DpQueryService_queryTable = new grpc.web.MethodDescriptor(
  '/dp.service.query.DpQueryService/queryTable',
  grpc.web.MethodType.UNARY,
  proto.dp.service.query.QueryTableRequest,
  proto.dp.service.query.QueryTableResponse,
  /**
   * @param {!proto.dp.service.query.QueryTableRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.query.QueryTableResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.query.QueryTableRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.query.QueryTableResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.query.QueryTableResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.query.DpQueryServiceClient.prototype.queryTable =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryTable',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryTable,
      callback);
};


/**
 * @param {!proto.dp.service.query.QueryTableRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.query.QueryTableResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.query.DpQueryServicePromiseClient.prototype.queryTable =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryTable',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryTable);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.query.QueryPvMetadataRequest,
 *   !proto.dp.service.query.QueryPvMetadataResponse>}
 */
const methodDescriptor_DpQueryService_queryPvMetadata = new grpc.web.MethodDescriptor(
  '/dp.service.query.DpQueryService/queryPvMetadata',
  grpc.web.MethodType.UNARY,
  proto.dp.service.query.QueryPvMetadataRequest,
  proto.dp.service.query.QueryPvMetadataResponse,
  /**
   * @param {!proto.dp.service.query.QueryPvMetadataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.query.QueryPvMetadataResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.query.QueryPvMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.query.QueryPvMetadataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.query.QueryPvMetadataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.query.DpQueryServiceClient.prototype.queryPvMetadata =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryPvMetadata',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryPvMetadata,
      callback);
};


/**
 * @param {!proto.dp.service.query.QueryPvMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.query.QueryPvMetadataResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.query.DpQueryServicePromiseClient.prototype.queryPvMetadata =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryPvMetadata',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryPvMetadata);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.query.QueryProvidersRequest,
 *   !proto.dp.service.query.QueryProvidersResponse>}
 */
const methodDescriptor_DpQueryService_queryProviders = new grpc.web.MethodDescriptor(
  '/dp.service.query.DpQueryService/queryProviders',
  grpc.web.MethodType.UNARY,
  proto.dp.service.query.QueryProvidersRequest,
  proto.dp.service.query.QueryProvidersResponse,
  /**
   * @param {!proto.dp.service.query.QueryProvidersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.query.QueryProvidersResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.query.QueryProvidersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.query.QueryProvidersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.query.QueryProvidersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.query.DpQueryServiceClient.prototype.queryProviders =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryProviders',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryProviders,
      callback);
};


/**
 * @param {!proto.dp.service.query.QueryProvidersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.query.QueryProvidersResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.query.DpQueryServicePromiseClient.prototype.queryProviders =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryProviders',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryProviders);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dp.service.query.QueryProviderMetadataRequest,
 *   !proto.dp.service.query.QueryProviderMetadataResponse>}
 */
const methodDescriptor_DpQueryService_queryProviderMetadata = new grpc.web.MethodDescriptor(
  '/dp.service.query.DpQueryService/queryProviderMetadata',
  grpc.web.MethodType.UNARY,
  proto.dp.service.query.QueryProviderMetadataRequest,
  proto.dp.service.query.QueryProviderMetadataResponse,
  /**
   * @param {!proto.dp.service.query.QueryProviderMetadataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dp.service.query.QueryProviderMetadataResponse.deserializeBinary
);


/**
 * @param {!proto.dp.service.query.QueryProviderMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dp.service.query.QueryProviderMetadataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dp.service.query.QueryProviderMetadataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dp.service.query.DpQueryServiceClient.prototype.queryProviderMetadata =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryProviderMetadata',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryProviderMetadata,
      callback);
};


/**
 * @param {!proto.dp.service.query.QueryProviderMetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dp.service.query.QueryProviderMetadataResponse>}
 *     Promise that resolves to the response
 */
proto.dp.service.query.DpQueryServicePromiseClient.prototype.queryProviderMetadata =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dp.service.query.DpQueryService/queryProviderMetadata',
      request,
      metadata || {},
      methodDescriptor_DpQueryService_queryProviderMetadata);
};


module.exports = proto.dp.service.query;

