// source: common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.Array', null, global);
goog.exportSymbol('proto.Attribute', null, global);
goog.exportSymbol('proto.CalculationsSpec', null, global);
goog.exportSymbol('proto.CalculationsSpec.ColumnNameList', null, global);
goog.exportSymbol('proto.DataColumn', null, global);
goog.exportSymbol('proto.DataTimestamps', null, global);
goog.exportSymbol('proto.DataTimestamps.ValueCase', null, global);
goog.exportSymbol('proto.DataValue', null, global);
goog.exportSymbol('proto.DataValue.ValueCase', null, global);
goog.exportSymbol('proto.DataValue.ValueStatus', null, global);
goog.exportSymbol('proto.DataValue.ValueStatus.Severity', null, global);
goog.exportSymbol('proto.DataValue.ValueStatus.StatusCode', null, global);
goog.exportSymbol('proto.EventMetadata', null, global);
goog.exportSymbol('proto.ExceptionalResult', null, global);
goog.exportSymbol('proto.ExceptionalResult.ExceptionalResultStatus', null, global);
goog.exportSymbol('proto.Image', null, global);
goog.exportSymbol('proto.Image.FileType', null, global);
goog.exportSymbol('proto.SamplingClock', null, global);
goog.exportSymbol('proto.SerializedDataColumn', null, global);
goog.exportSymbol('proto.Structure', null, global);
goog.exportSymbol('proto.Structure.Field', null, global);
goog.exportSymbol('proto.Timestamp', null, global);
goog.exportSymbol('proto.TimestampList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Attribute.displayName = 'proto.Attribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EventMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EventMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EventMetadata.displayName = 'proto.EventMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Timestamp.displayName = 'proto.Timestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimestampList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimestampList.repeatedFields_, null);
};
goog.inherits(proto.TimestampList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimestampList.displayName = 'proto.TimestampList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SamplingClock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SamplingClock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SamplingClock.displayName = 'proto.SamplingClock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataTimestamps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.DataTimestamps.oneofGroups_);
};
goog.inherits(proto.DataTimestamps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataTimestamps.displayName = 'proto.DataTimestamps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExceptionalResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExceptionalResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExceptionalResult.displayName = 'proto.ExceptionalResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DataColumn.repeatedFields_, null);
};
goog.inherits(proto.DataColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataColumn.displayName = 'proto.DataColumn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SerializedDataColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SerializedDataColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SerializedDataColumn.displayName = 'proto.SerializedDataColumn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.DataValue.oneofGroups_);
};
goog.inherits(proto.DataValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataValue.displayName = 'proto.DataValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataValue.ValueStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DataValue.ValueStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataValue.ValueStatus.displayName = 'proto.DataValue.ValueStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Structure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Structure.repeatedFields_, null);
};
goog.inherits(proto.Structure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Structure.displayName = 'proto.Structure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Structure.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Structure.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Structure.Field.displayName = 'proto.Structure.Field';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Array.repeatedFields_, null);
};
goog.inherits(proto.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Array.displayName = 'proto.Array';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Image.displayName = 'proto.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CalculationsSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CalculationsSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CalculationsSpec.displayName = 'proto.CalculationsSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CalculationsSpec.ColumnNameList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CalculationsSpec.ColumnNameList.repeatedFields_, null);
};
goog.inherits(proto.CalculationsSpec.ColumnNameList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CalculationsSpec.ColumnNameList.displayName = 'proto.CalculationsSpec.ColumnNameList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Attribute}
 */
proto.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Attribute;
  return proto.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Attribute}
 */
proto.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Attribute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.Attribute.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EventMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.EventMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EventMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    starttimestamp: (f = msg.getStarttimestamp()) && proto.Timestamp.toObject(includeInstance, f),
    stoptimestamp: (f = msg.getStoptimestamp()) && proto.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EventMetadata}
 */
proto.EventMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EventMetadata;
  return proto.EventMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EventMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EventMetadata}
 */
proto.EventMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setStarttimestamp(value);
      break;
    case 3:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setStoptimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EventMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EventMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EventMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EventMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStarttimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStoptimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.EventMetadata.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.EventMetadata} returns this
 */
proto.EventMetadata.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Timestamp startTimestamp = 2;
 * @return {?proto.Timestamp}
 */
proto.EventMetadata.prototype.getStarttimestamp = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 2));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.EventMetadata} returns this
*/
proto.EventMetadata.prototype.setStarttimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EventMetadata} returns this
 */
proto.EventMetadata.prototype.clearStarttimestamp = function() {
  return this.setStarttimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EventMetadata.prototype.hasStarttimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Timestamp stopTimestamp = 3;
 * @return {?proto.Timestamp}
 */
proto.EventMetadata.prototype.getStoptimestamp = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 3));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.EventMetadata} returns this
*/
proto.EventMetadata.prototype.setStoptimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EventMetadata} returns this
 */
proto.EventMetadata.prototype.clearStoptimestamp = function() {
  return this.setStoptimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EventMetadata.prototype.hasStoptimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    epochseconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanoseconds: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Timestamp}
 */
proto.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Timestamp;
  return proto.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Timestamp}
 */
proto.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochseconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNanoseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpochseconds();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNanoseconds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 epochSeconds = 1;
 * @return {number}
 */
proto.Timestamp.prototype.getEpochseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Timestamp} returns this
 */
proto.Timestamp.prototype.setEpochseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 nanoseconds = 2;
 * @return {number}
 */
proto.Timestamp.prototype.getNanoseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Timestamp} returns this
 */
proto.Timestamp.prototype.setNanoseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimestampList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimestampList.prototype.toObject = function(opt_includeInstance) {
  return proto.TimestampList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimestampList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampList.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampsList: jspb.Message.toObjectList(msg.getTimestampsList(),
    proto.Timestamp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimestampList}
 */
proto.TimestampList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimestampList;
  return proto.TimestampList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimestampList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimestampList}
 */
proto.TimestampList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.addTimestamps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimestampList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimestampList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimestampList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Timestamp timestamps = 1;
 * @return {!Array<!proto.Timestamp>}
 */
proto.TimestampList.prototype.getTimestampsList = function() {
  return /** @type{!Array<!proto.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Timestamp, 1));
};


/**
 * @param {!Array<!proto.Timestamp>} value
 * @return {!proto.TimestampList} returns this
*/
proto.TimestampList.prototype.setTimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Timestamp}
 */
proto.TimestampList.prototype.addTimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Timestamp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimestampList} returns this
 */
proto.TimestampList.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SamplingClock.prototype.toObject = function(opt_includeInstance) {
  return proto.SamplingClock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SamplingClock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SamplingClock.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: (f = msg.getStarttime()) && proto.Timestamp.toObject(includeInstance, f),
    periodnanos: jspb.Message.getFieldWithDefault(msg, 2, 0),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SamplingClock}
 */
proto.SamplingClock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SamplingClock;
  return proto.SamplingClock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SamplingClock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SamplingClock}
 */
proto.SamplingClock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPeriodnanos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SamplingClock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SamplingClock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SamplingClock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SamplingClock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPeriodnanos();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional Timestamp startTime = 1;
 * @return {?proto.Timestamp}
 */
proto.SamplingClock.prototype.getStarttime = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 1));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.SamplingClock} returns this
*/
proto.SamplingClock.prototype.setStarttime = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SamplingClock} returns this
 */
proto.SamplingClock.prototype.clearStarttime = function() {
  return this.setStarttime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SamplingClock.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 periodNanos = 2;
 * @return {number}
 */
proto.SamplingClock.prototype.getPeriodnanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SamplingClock} returns this
 */
proto.SamplingClock.prototype.setPeriodnanos = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 count = 3;
 * @return {number}
 */
proto.SamplingClock.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SamplingClock} returns this
 */
proto.SamplingClock.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.DataTimestamps.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.DataTimestamps.ValueCase = {
  VALUE_NOT_SET: 0,
  SAMPLINGCLOCK: 1,
  TIMESTAMPLIST: 2
};

/**
 * @return {proto.DataTimestamps.ValueCase}
 */
proto.DataTimestamps.prototype.getValueCase = function() {
  return /** @type {proto.DataTimestamps.ValueCase} */(jspb.Message.computeOneofCase(this, proto.DataTimestamps.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataTimestamps.prototype.toObject = function(opt_includeInstance) {
  return proto.DataTimestamps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataTimestamps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataTimestamps.toObject = function(includeInstance, msg) {
  var f, obj = {
    samplingclock: (f = msg.getSamplingclock()) && proto.SamplingClock.toObject(includeInstance, f),
    timestamplist: (f = msg.getTimestamplist()) && proto.TimestampList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataTimestamps}
 */
proto.DataTimestamps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataTimestamps;
  return proto.DataTimestamps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataTimestamps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataTimestamps}
 */
proto.DataTimestamps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SamplingClock;
      reader.readMessage(value,proto.SamplingClock.deserializeBinaryFromReader);
      msg.setSamplingclock(value);
      break;
    case 2:
      var value = new proto.TimestampList;
      reader.readMessage(value,proto.TimestampList.deserializeBinaryFromReader);
      msg.setTimestamplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataTimestamps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataTimestamps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataTimestamps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataTimestamps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSamplingclock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SamplingClock.serializeBinaryToWriter
    );
  }
  f = message.getTimestamplist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TimestampList.serializeBinaryToWriter
    );
  }
};


/**
 * optional SamplingClock samplingClock = 1;
 * @return {?proto.SamplingClock}
 */
proto.DataTimestamps.prototype.getSamplingclock = function() {
  return /** @type{?proto.SamplingClock} */ (
    jspb.Message.getWrapperField(this, proto.SamplingClock, 1));
};


/**
 * @param {?proto.SamplingClock|undefined} value
 * @return {!proto.DataTimestamps} returns this
*/
proto.DataTimestamps.prototype.setSamplingclock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.DataTimestamps.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DataTimestamps} returns this
 */
proto.DataTimestamps.prototype.clearSamplingclock = function() {
  return this.setSamplingclock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataTimestamps.prototype.hasSamplingclock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimestampList timestampList = 2;
 * @return {?proto.TimestampList}
 */
proto.DataTimestamps.prototype.getTimestamplist = function() {
  return /** @type{?proto.TimestampList} */ (
    jspb.Message.getWrapperField(this, proto.TimestampList, 2));
};


/**
 * @param {?proto.TimestampList|undefined} value
 * @return {!proto.DataTimestamps} returns this
*/
proto.DataTimestamps.prototype.setTimestamplist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.DataTimestamps.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DataTimestamps} returns this
 */
proto.DataTimestamps.prototype.clearTimestamplist = function() {
  return this.setTimestamplist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataTimestamps.prototype.hasTimestamplist = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExceptionalResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ExceptionalResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExceptionalResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExceptionalResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    exceptionalresultstatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExceptionalResult}
 */
proto.ExceptionalResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExceptionalResult;
  return proto.ExceptionalResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExceptionalResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExceptionalResult}
 */
proto.ExceptionalResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ExceptionalResult.ExceptionalResultStatus} */ (reader.readEnum());
      msg.setExceptionalresultstatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExceptionalResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExceptionalResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExceptionalResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExceptionalResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExceptionalresultstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ExceptionalResult.ExceptionalResultStatus = {
  RESULT_STATUS_REJECT: 0,
  RESULT_STATUS_ERROR: 1,
  RESULT_STATUS_NOT_READY: 2
};

/**
 * optional ExceptionalResultStatus exceptionalResultStatus = 1;
 * @return {!proto.ExceptionalResult.ExceptionalResultStatus}
 */
proto.ExceptionalResult.prototype.getExceptionalresultstatus = function() {
  return /** @type {!proto.ExceptionalResult.ExceptionalResultStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ExceptionalResult.ExceptionalResultStatus} value
 * @return {!proto.ExceptionalResult} returns this
 */
proto.ExceptionalResult.prototype.setExceptionalresultstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ExceptionalResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExceptionalResult} returns this
 */
proto.ExceptionalResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DataColumn.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.DataColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datavaluesList: jspb.Message.toObjectList(msg.getDatavaluesList(),
    proto.DataValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataColumn}
 */
proto.DataColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataColumn;
  return proto.DataColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataColumn}
 */
proto.DataColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.DataValue;
      reader.readMessage(value,proto.DataValue.deserializeBinaryFromReader);
      msg.addDatavalues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatavaluesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.DataValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.DataColumn.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataColumn} returns this
 */
proto.DataColumn.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated DataValue dataValues = 2;
 * @return {!Array<!proto.DataValue>}
 */
proto.DataColumn.prototype.getDatavaluesList = function() {
  return /** @type{!Array<!proto.DataValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DataValue, 2));
};


/**
 * @param {!Array<!proto.DataValue>} value
 * @return {!proto.DataColumn} returns this
*/
proto.DataColumn.prototype.setDatavaluesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.DataValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DataValue}
 */
proto.DataColumn.prototype.addDatavalues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.DataValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DataColumn} returns this
 */
proto.DataColumn.prototype.clearDatavaluesList = function() {
  return this.setDatavaluesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SerializedDataColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.SerializedDataColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SerializedDataColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SerializedDataColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datacolumnbytes: msg.getDatacolumnbytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SerializedDataColumn}
 */
proto.SerializedDataColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SerializedDataColumn;
  return proto.SerializedDataColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SerializedDataColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SerializedDataColumn}
 */
proto.SerializedDataColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDatacolumnbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SerializedDataColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SerializedDataColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SerializedDataColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SerializedDataColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatacolumnbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.SerializedDataColumn.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SerializedDataColumn} returns this
 */
proto.SerializedDataColumn.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes dataColumnBytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.SerializedDataColumn.prototype.getDatacolumnbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes dataColumnBytes = 2;
 * This is a type-conversion wrapper around `getDatacolumnbytes()`
 * @return {string}
 */
proto.SerializedDataColumn.prototype.getDatacolumnbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDatacolumnbytes()));
};


/**
 * optional bytes dataColumnBytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDatacolumnbytes()`
 * @return {!Uint8Array}
 */
proto.SerializedDataColumn.prototype.getDatacolumnbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDatacolumnbytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.SerializedDataColumn} returns this
 */
proto.SerializedDataColumn.prototype.setDatacolumnbytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.DataValue.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.DataValue.ValueCase = {
  VALUE_NOT_SET: 0,
  STRINGVALUE: 1,
  BOOLEANVALUE: 2,
  UINTVALUE: 3,
  ULONGVALUE: 4,
  INTVALUE: 5,
  LONGVALUE: 6,
  FLOATVALUE: 7,
  DOUBLEVALUE: 8,
  BYTEARRAYVALUE: 9,
  ARRAYVALUE: 10,
  STRUCTUREVALUE: 11,
  IMAGEVALUE: 12,
  TIMESTAMPVALUE: 13
};

/**
 * @return {proto.DataValue.ValueCase}
 */
proto.DataValue.prototype.getValueCase = function() {
  return /** @type {proto.DataValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.DataValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataValue.prototype.toObject = function(opt_includeInstance) {
  return proto.DataValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringvalue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    booleanvalue: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    uintvalue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ulongvalue: jspb.Message.getFieldWithDefault(msg, 4, 0),
    intvalue: jspb.Message.getFieldWithDefault(msg, 5, 0),
    longvalue: jspb.Message.getFieldWithDefault(msg, 6, 0),
    floatvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    doublevalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    bytearrayvalue: msg.getBytearrayvalue_asB64(),
    arrayvalue: (f = msg.getArrayvalue()) && proto.Array.toObject(includeInstance, f),
    structurevalue: (f = msg.getStructurevalue()) && proto.Structure.toObject(includeInstance, f),
    imagevalue: (f = msg.getImagevalue()) && proto.Image.toObject(includeInstance, f),
    timestampvalue: (f = msg.getTimestampvalue()) && proto.Timestamp.toObject(includeInstance, f),
    valuestatus: (f = msg.getValuestatus()) && proto.DataValue.ValueStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataValue}
 */
proto.DataValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataValue;
  return proto.DataValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataValue}
 */
proto.DataValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBooleanvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUintvalue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUlongvalue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setIntvalue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setLongvalue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatvalue(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoublevalue(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytearrayvalue(value);
      break;
    case 10:
      var value = new proto.Array;
      reader.readMessage(value,proto.Array.deserializeBinaryFromReader);
      msg.setArrayvalue(value);
      break;
    case 11:
      var value = new proto.Structure;
      reader.readMessage(value,proto.Structure.deserializeBinaryFromReader);
      msg.setStructurevalue(value);
      break;
    case 12:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setImagevalue(value);
      break;
    case 13:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setTimestampvalue(value);
      break;
    case 15:
      var value = new proto.DataValue.ValueStatus;
      reader.readMessage(value,proto.DataValue.ValueStatus.deserializeBinaryFromReader);
      msg.setValuestatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getArrayvalue();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Array.serializeBinaryToWriter
    );
  }
  f = message.getStructurevalue();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Structure.serializeBinaryToWriter
    );
  }
  f = message.getImagevalue();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getTimestampvalue();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getValuestatus();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.DataValue.ValueStatus.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataValue.ValueStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.DataValue.ValueStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataValue.ValueStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataValue.ValueStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    statuscode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    severity: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataValue.ValueStatus}
 */
proto.DataValue.ValueStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataValue.ValueStatus;
  return proto.DataValue.ValueStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataValue.ValueStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataValue.ValueStatus}
 */
proto.DataValue.ValueStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!proto.DataValue.ValueStatus.StatusCode} */ (reader.readEnum());
      msg.setStatuscode(value);
      break;
    case 3:
      var value = /** @type {!proto.DataValue.ValueStatus.Severity} */ (reader.readEnum());
      msg.setSeverity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataValue.ValueStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataValue.ValueStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataValue.ValueStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataValue.ValueStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatuscode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSeverity();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.DataValue.ValueStatus.StatusCode = {
  NO_STATUS: 0,
  DEVICE_STATUS: 1,
  DRIVER_STATUS: 2,
  RECORD_STATUS: 3,
  DB_STATUS: 4,
  CONF_STATUS: 5,
  UNDEFINED_STATUS: 6,
  CLIENT_STATUS: 7
};

/**
 * @enum {number}
 */
proto.DataValue.ValueStatus.Severity = {
  NO_ALARM: 0,
  MINOR_ALARM: 1,
  MAJOR_ALARM: 2,
  INVALID_ALARM: 3,
  UNDEFINED_ALARM: 4
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.DataValue.ValueStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataValue.ValueStatus} returns this
 */
proto.DataValue.ValueStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StatusCode statusCode = 2;
 * @return {!proto.DataValue.ValueStatus.StatusCode}
 */
proto.DataValue.ValueStatus.prototype.getStatuscode = function() {
  return /** @type {!proto.DataValue.ValueStatus.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.DataValue.ValueStatus.StatusCode} value
 * @return {!proto.DataValue.ValueStatus} returns this
 */
proto.DataValue.ValueStatus.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Severity severity = 3;
 * @return {!proto.DataValue.ValueStatus.Severity}
 */
proto.DataValue.ValueStatus.prototype.getSeverity = function() {
  return /** @type {!proto.DataValue.ValueStatus.Severity} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.DataValue.ValueStatus.Severity} value
 * @return {!proto.DataValue.ValueStatus} returns this
 */
proto.DataValue.ValueStatus.prototype.setSeverity = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string stringValue = 1;
 * @return {string}
 */
proto.DataValue.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setStringvalue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearStringvalue = function() {
  return jspb.Message.setOneofField(this, 1, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasStringvalue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool booleanValue = 2;
 * @return {boolean}
 */
proto.DataValue.prototype.getBooleanvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setBooleanvalue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearBooleanvalue = function() {
  return jspb.Message.setOneofField(this, 2, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasBooleanvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 uintValue = 3;
 * @return {number}
 */
proto.DataValue.prototype.getUintvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setUintvalue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearUintvalue = function() {
  return jspb.Message.setOneofField(this, 3, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasUintvalue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 ulongValue = 4;
 * @return {number}
 */
proto.DataValue.prototype.getUlongvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setUlongvalue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearUlongvalue = function() {
  return jspb.Message.setOneofField(this, 4, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasUlongvalue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 intValue = 5;
 * @return {number}
 */
proto.DataValue.prototype.getIntvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setIntvalue = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearIntvalue = function() {
  return jspb.Message.setOneofField(this, 5, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasIntvalue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint64 longValue = 6;
 * @return {number}
 */
proto.DataValue.prototype.getLongvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setLongvalue = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearLongvalue = function() {
  return jspb.Message.setOneofField(this, 6, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasLongvalue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float floatValue = 7;
 * @return {number}
 */
proto.DataValue.prototype.getFloatvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setFloatvalue = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearFloatvalue = function() {
  return jspb.Message.setOneofField(this, 7, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasFloatvalue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double doubleValue = 8;
 * @return {number}
 */
proto.DataValue.prototype.getDoublevalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setDoublevalue = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearDoublevalue = function() {
  return jspb.Message.setOneofField(this, 8, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasDoublevalue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes byteArrayValue = 9;
 * @return {!(string|Uint8Array)}
 */
proto.DataValue.prototype.getBytearrayvalue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes byteArrayValue = 9;
 * This is a type-conversion wrapper around `getBytearrayvalue()`
 * @return {string}
 */
proto.DataValue.prototype.getBytearrayvalue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytearrayvalue()));
};


/**
 * optional bytes byteArrayValue = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytearrayvalue()`
 * @return {!Uint8Array}
 */
proto.DataValue.prototype.getBytearrayvalue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytearrayvalue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.setBytearrayvalue = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearBytearrayvalue = function() {
  return jspb.Message.setOneofField(this, 9, proto.DataValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasBytearrayvalue = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Array arrayValue = 10;
 * @return {?proto.Array}
 */
proto.DataValue.prototype.getArrayvalue = function() {
  return /** @type{?proto.Array} */ (
    jspb.Message.getWrapperField(this, proto.Array, 10));
};


/**
 * @param {?proto.Array|undefined} value
 * @return {!proto.DataValue} returns this
*/
proto.DataValue.prototype.setArrayvalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearArrayvalue = function() {
  return this.setArrayvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasArrayvalue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Structure structureValue = 11;
 * @return {?proto.Structure}
 */
proto.DataValue.prototype.getStructurevalue = function() {
  return /** @type{?proto.Structure} */ (
    jspb.Message.getWrapperField(this, proto.Structure, 11));
};


/**
 * @param {?proto.Structure|undefined} value
 * @return {!proto.DataValue} returns this
*/
proto.DataValue.prototype.setStructurevalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearStructurevalue = function() {
  return this.setStructurevalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasStructurevalue = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Image imageValue = 12;
 * @return {?proto.Image}
 */
proto.DataValue.prototype.getImagevalue = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 12));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.DataValue} returns this
*/
proto.DataValue.prototype.setImagevalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearImagevalue = function() {
  return this.setImagevalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasImagevalue = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Timestamp timestampValue = 13;
 * @return {?proto.Timestamp}
 */
proto.DataValue.prototype.getTimestampvalue = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 13));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.DataValue} returns this
*/
proto.DataValue.prototype.setTimestampvalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.DataValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearTimestampvalue = function() {
  return this.setTimestampvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasTimestampvalue = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ValueStatus valueStatus = 15;
 * @return {?proto.DataValue.ValueStatus}
 */
proto.DataValue.prototype.getValuestatus = function() {
  return /** @type{?proto.DataValue.ValueStatus} */ (
    jspb.Message.getWrapperField(this, proto.DataValue.ValueStatus, 15));
};


/**
 * @param {?proto.DataValue.ValueStatus|undefined} value
 * @return {!proto.DataValue} returns this
*/
proto.DataValue.prototype.setValuestatus = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DataValue} returns this
 */
proto.DataValue.prototype.clearValuestatus = function() {
  return this.setValuestatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataValue.prototype.hasValuestatus = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Structure.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Structure.prototype.toObject = function(opt_includeInstance) {
  return proto.Structure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Structure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Structure.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.Structure.Field.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Structure}
 */
proto.Structure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Structure;
  return proto.Structure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Structure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Structure}
 */
proto.Structure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Structure.Field;
      reader.readMessage(value,proto.Structure.Field.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Structure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Structure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Structure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Structure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Structure.Field.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Structure.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.Structure.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Structure.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Structure.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.DataValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Structure.Field}
 */
proto.Structure.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Structure.Field;
  return proto.Structure.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Structure.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Structure.Field}
 */
proto.Structure.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.DataValue;
      reader.readMessage(value,proto.DataValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Structure.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Structure.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Structure.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Structure.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DataValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Structure.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Structure.Field} returns this
 */
proto.Structure.Field.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DataValue value = 2;
 * @return {?proto.DataValue}
 */
proto.Structure.Field.prototype.getValue = function() {
  return /** @type{?proto.DataValue} */ (
    jspb.Message.getWrapperField(this, proto.DataValue, 2));
};


/**
 * @param {?proto.DataValue|undefined} value
 * @return {!proto.Structure.Field} returns this
*/
proto.Structure.Field.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Structure.Field} returns this
 */
proto.Structure.Field.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Structure.Field.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Field fields = 1;
 * @return {!Array<!proto.Structure.Field>}
 */
proto.Structure.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.Structure.Field>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Structure.Field, 1));
};


/**
 * @param {!Array<!proto.Structure.Field>} value
 * @return {!proto.Structure} returns this
*/
proto.Structure.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Structure.Field=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Structure.Field}
 */
proto.Structure.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Structure.Field, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Structure} returns this
 */
proto.Structure.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    datavaluesList: jspb.Message.toObjectList(msg.getDatavaluesList(),
    proto.DataValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Array}
 */
proto.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Array;
  return proto.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Array}
 */
proto.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DataValue;
      reader.readMessage(value,proto.DataValue.deserializeBinaryFromReader);
      msg.addDatavalues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatavaluesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DataValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DataValue dataValues = 1;
 * @return {!Array<!proto.DataValue>}
 */
proto.Array.prototype.getDatavaluesList = function() {
  return /** @type{!Array<!proto.DataValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DataValue, 1));
};


/**
 * @param {!Array<!proto.DataValue>} value
 * @return {!proto.Array} returns this
*/
proto.Array.prototype.setDatavaluesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DataValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DataValue}
 */
proto.Array.prototype.addDatavalues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DataValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Array} returns this
 */
proto.Array.prototype.clearDatavaluesList = function() {
  return this.setDatavaluesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: msg.getImage_asB64(),
    filetype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image;
  return proto.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {!proto.Image.FileType} */ (reader.readEnum());
      msg.setFiletype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFiletype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Image.FileType = {
  RAW: 0,
  JPEG: 1,
  GIF: 2,
  TIFF: 3,
  BMP: 4,
  PNG: 5,
  EPS: 6,
  SVG: 7,
  PDF: 8
};

/**
 * optional bytes image = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Image.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes image = 1;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.Image.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.Image.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional FileType fileType = 2;
 * @return {!proto.Image.FileType}
 */
proto.Image.prototype.getFiletype = function() {
  return /** @type {!proto.Image.FileType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Image.FileType} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setFiletype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CalculationsSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.CalculationsSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CalculationsSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CalculationsSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    calculationsid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataframecolumnsMap: (f = msg.getDataframecolumnsMap()) ? f.toObject(includeInstance, proto.CalculationsSpec.ColumnNameList.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CalculationsSpec}
 */
proto.CalculationsSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CalculationsSpec;
  return proto.CalculationsSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CalculationsSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CalculationsSpec}
 */
proto.CalculationsSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalculationsid(value);
      break;
    case 2:
      var value = msg.getDataframecolumnsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.CalculationsSpec.ColumnNameList.deserializeBinaryFromReader, "", new proto.CalculationsSpec.ColumnNameList());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CalculationsSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CalculationsSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CalculationsSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CalculationsSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalculationsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataframecolumnsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.CalculationsSpec.ColumnNameList.serializeBinaryToWriter);
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CalculationsSpec.ColumnNameList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CalculationsSpec.ColumnNameList.prototype.toObject = function(opt_includeInstance) {
  return proto.CalculationsSpec.ColumnNameList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CalculationsSpec.ColumnNameList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CalculationsSpec.ColumnNameList.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnnamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CalculationsSpec.ColumnNameList}
 */
proto.CalculationsSpec.ColumnNameList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CalculationsSpec.ColumnNameList;
  return proto.CalculationsSpec.ColumnNameList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CalculationsSpec.ColumnNameList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CalculationsSpec.ColumnNameList}
 */
proto.CalculationsSpec.ColumnNameList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumnnames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CalculationsSpec.ColumnNameList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CalculationsSpec.ColumnNameList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CalculationsSpec.ColumnNameList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CalculationsSpec.ColumnNameList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string columnNames = 1;
 * @return {!Array<string>}
 */
proto.CalculationsSpec.ColumnNameList.prototype.getColumnnamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.CalculationsSpec.ColumnNameList} returns this
 */
proto.CalculationsSpec.ColumnNameList.prototype.setColumnnamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.CalculationsSpec.ColumnNameList} returns this
 */
proto.CalculationsSpec.ColumnNameList.prototype.addColumnnames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CalculationsSpec.ColumnNameList} returns this
 */
proto.CalculationsSpec.ColumnNameList.prototype.clearColumnnamesList = function() {
  return this.setColumnnamesList([]);
};


/**
 * optional string calculationsId = 1;
 * @return {string}
 */
proto.CalculationsSpec.prototype.getCalculationsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CalculationsSpec} returns this
 */
proto.CalculationsSpec.prototype.setCalculationsid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, ColumnNameList> dataFrameColumns = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.CalculationsSpec.ColumnNameList>}
 */
proto.CalculationsSpec.prototype.getDataframecolumnsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.CalculationsSpec.ColumnNameList>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.CalculationsSpec.ColumnNameList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.CalculationsSpec} returns this
 */
proto.CalculationsSpec.prototype.clearDataframecolumnsMap = function() {
  this.getDataframecolumnsMap().clear();
  return this;
};


goog.object.extend(exports, proto);
