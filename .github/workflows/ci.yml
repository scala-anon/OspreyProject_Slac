# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc-9, gcc-11, clang-12]
        build_type: [Release, Debug]
        include:
          - compiler: gcc-9
            cc: gcc-9
            cxx: g++-9
          - compiler: gcc-11
            cc: gcc-11
            cxx: g++-11
          - compiler: clang-12
            cc: clang-12
            cxx: clang++-12

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          gcc-9 \
          g++-9 \
          gcc-11 \
          g++-11 \
          clang-12 \
          clang++-12 \
          libprotobuf-dev \
          libgrpc++-dev \
          protobuf-compiler-grpc \
          protobuf-compiler \
          libhdf5-dev \
          libhdf5-cpp-103 \
          nlohmann-json3-dev \
          libmongoc-dev \
          libmongocxx-dev \
          pkg-config \
          valgrind \
          cppcheck

    - name: Setup MongoDB (for integration tests)
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: 6.0

    - name: Configure CMake
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCMAKE_VERBOSE_MAKEFILE=OFF \
          -DENABLE_TESTING=ON \
          -DENABLE_COVERAGE=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
          -G Ninja

    - name: Build project
      run: |
        cd build
        ninja -j$(nproc)

    - name: Run unit tests
      run: |
        cd build
        ctest --output-on-failure --parallel $(nproc)

    - name: Run static analysis (Debug builds only)
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-11'
      run: |
        cd build
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          ../src ../include ../apps 2> cppcheck-report.xml

    - name: Run memory checks (Debug builds only)
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-11'
      run: |
        cd build
        # Run key executables with valgrind
        if [ -f bin/h5_to_dp ]; then
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --error-exitcode=1 --xml=yes --xml-file=valgrind-report.xml \
            ./bin/h5_to_dp --help || true
        fi

    - name: Generate coverage report
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-11'
      run: |
        cd build
        sudo apt-get install -y lcov
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --remove coverage.info '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-11'
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage.info
        flags: unittests
        name: codecov-umbrella

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.build_type == 'Release' && matrix.compiler == 'gcc-11'
      with:
        name: osprey-dataprovider-${{ github.sha }}
        path: |
          build/bin/
          build/lib/
        retention-days: 30

    - name: Test build script
      run: |
        chmod +x DataProvider/build_dp.sh
        ./DataProvider/build_dp.sh clean
        ./DataProvider/build_dp.sh

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libprotobuf-dev \
          libgrpc++-dev \
          protobuf-compiler-grpc \
          protobuf-compiler \
          libhdf5-dev \
          libhdf5-cpp-103 \
          nlohmann-json3-dev \
          libmongoc-dev \
          libmongocxx-dev

    - name: Setup MongoDB
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: 6.0

    - name: Build and run integration tests
      run: |
        chmod +x DataProvider/build_dp.sh
        ./DataProvider/build_dp.sh
        
        # Test basic functionality
        if [ -f DataProvider/bin/h5_to_dp ]; then
          echo "Testing h5_to_dp help..."
          ./DataProvider/bin/h5_to_dp --help
        fi
        
        if [ -f DataProvider/bin/query_pv ]; then
          echo "Testing query_pv help..."
          ./DataProvider/bin/query_pv --help
        fi

  release:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, integration-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libprotobuf-dev \
          libgrpc++-dev \
          protobuf-compiler-grpc \
          protobuf-compiler \
          libhdf5-dev \
          libhdf5-cpp-103 \
          nlohmann-json3-dev \
          libmongoc-dev \
          libmongocxx-dev

    - name: Build release
      run: |
        chmod +x DataProvider/build_dp.sh
        ./DataProvider/build_dp.sh

    - name: Create release archive
      run: |
        tar -czf osprey-dataprovider-${{ github.ref_name }}.tar.gz \
          DataProvider/bin/ \
          DataProvider/config/ \
          DataProvider/scripts/ \
          README.md \
          LICENSE

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          osprey-dataprovider-${{ github.ref_name }}.tar.gz
        body: |
          ## Changes in ${{ github.ref_name }}
          
          ### Features
          - High-performance C++ data processing pipeline
          - H5 file parsing and MongoDB integration
          - Spatial enrichment for accelerator data
          - Statistical analysis and data quality metrics
          
          ### Installation
          ```bash
          tar -xzf osprey-dataprovider-${{ github.ref_name }}.tar.gz
          cd DataProvider
          ./build_dp.sh
          ```
          
          See README.md for detailed installation and usage instructions.
        draft: false
        prerelease: contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
