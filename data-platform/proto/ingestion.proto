//
// ingestion.proto
//
// Contains methods and data types specific to the Ingestion Service.

syntax = "proto3";

package dp.service.ingestion;

option java_multiple_files = true;
option java_package = "com.ospreydcs.dp.grpc.v1.ingestion";

import "common.proto";


//
// ------------------- RPC Interfaces ---------------------------
//

/*
 * The Ingestion Service Interface
 *
 * Defines RPC operations for data provider registration and ingestion.
 *
 */
service DpIngestionService {

  /*
   * registerProvider(): Data provider registration.
   *
   * This unary method sends a single RegisterProviderRequest and receives a single RegisterProviderResponse.  It is
   * required to call this method to register a data provider before calling one of the data ingestion methods using
   * the id of that provider.
   *
   * Provider name is required in the RegisterProviderRequest, which may also contain optional descriptive fields.
   *
   * The response message indicates whether or not the registration was successful.  The response payload is an
   * ExceptionalResult if the request is unsuccessful, otherwise it is a RegistrationResult that includes details about
   * the new provider including providerId (for use in calls to data ingestion methods) and a flag indicating if the
   * provider is new.  On success, if a document already exists in the MongoDB "providers" collection for the provider
   * name specified in the RegisterProviderRequest, the method returns the corresponding provider id in the response,
   * otherwise a new document is created in the "providers" collection and its id returned in the response.
   *
   * It is safe (and recommended) to call this method each time a data ingestion client is run.  If a document already
   * exists in the MongoDB providers collection for the specified provider, the attributes are updated to the values in
   * the RegisterProviderRequest.
   */
  rpc registerProvider (RegisterProviderRequest) returns (RegisterProviderResponse);

  /*
   * ingestData(): Unary (non-streaming) data ingestion.
   *
   * This method sends a single IngestDataRequest and receives a single IngestDataResponse.  Validation,
   * rejection / acknowledgment, asynchronous handling, and request status reporting is otherwise the same as for the
   * ingestDataBidiStream() method.
   */
  rpc ingestData (IngestDataRequest) returns (IngestDataResponse);

  /*
   * ingestDataStream(): Unidirectional client-side streaming data ingestion.
   *
   * This client-side streaming ingestion method sends a stream of IngestDataRequest messages and receives a single
   * IngestDataStreamResponse. Validation, rejection / acknowledgment, asynchronous handling, and request status
   * reporting is otherwise the same as for the ingestDataBidiStream() method, with the only difference being that
   * there is a single summary response message for the request stream instead of a stream of individual responses to
   * each request message.
   */
  rpc ingestDataStream (stream IngestDataRequest) returns (IngestDataStreamResponse);

  /*
   * ingestDataBidiStream(): Bidirectional streaming data ingestion.
   *
   * The Ingestion Service performs initial validation on each IngestDataRequest in the stream, and replies immediately
   * with a IngestDataResponse message indicating acknowledgement for a valid request, or rejection of an invalid one.
   * The request is then added to a queue for async ingestion handling.
   *
   * The ingestion handling of each request in the stream is performed asynchronously.  The Ingestion Service writes
   * data from the request to the "buckets" collection in MongoDB, adding one document to the collection for each
   * "column" of data in the request's DataFrame object.
   *
   * A separate MongoDB "requestStatus" collection is used to note the processing status of each request,
   * with a document for each handled request.  The collection is keyed by the providerId and clientRequestId
   * specified in the IngestDataRequest.  This collection can be used by an administrative monitoring process
   * to detect and notify about errors in the ingestion process.
   *
   * The method returns a stream of IngestDataResponse messages, one per request.  Each response includes providerId
   * and clientRequestId for use by the client in mapping a response to the corresponding request.  The response
   * message only indicates if validation succeeded or failed.  Because ingestion handling is performed asynchronously,
   * the MongoDB "requestStatus" collection must be used to determine the success or failure of individual requests.
   */
  rpc ingestDataBidiStream (stream IngestDataRequest) returns (stream IngestDataResponse);

  /*
   * queryRequestStatus(): Ingestion request status query.
   *
   * This unary method sends a single QueryRequestStatusRequest and receives a single QueryRequestStatusResponse.  It
   * is used to determine the status of an individual data ingestion request, or to find data ingestion errors for a
   * specified time range.
   *
   * The QueryRequestStatusRequest message contains a list of criteria for searching by provider id, provider name,
   * request id, status, and time range. The criteria can be combined arbitrarily, but we envision three primary use
   * cases:
   *
   * 1) Query by provider id or name and request id to find the status of a specific ingestion request.
   * 2) Query by provider id or name, status (e.g., rejected or error) and time range.
   * 3) Query by status and time range without specifying a provider (e.g., "find all ingestion errors for today").
   *
   * The QueryRequestStatusResponse message payload is either an ExceptionalResult containing details about a
   * rejection or error, or a RequestStatusResult containing a list of RequestStatus messages, one for each document
   * in the MongoDB "requestStatus" collection that matches the search criteria.
   *
   * Each RequestStatus message contains details about the status of an individual ingestion request, including
   * provider id/name, request id, status enum, status message, and list of bucket ids created (documents added to the
   * MongoDB "buckets" collection).
   */
  rpc queryRequestStatus(QueryRequestStatusRequest) returns (QueryRequestStatusResponse);

  /*
   * subscribeData(): Register a subscription for new data received in the ingestion stream.
   *
   * This method allows the client to register a subscription for a list of PVs, and receive new data for those PVs
   * received by the Ingestion Service after the subscription is created.  The method uses bidirectional streaming.
   * The client sends SubscribeDataRequest messages in the method's request stream, and receives SubscribeDataResponse
   * messages in the response stream.
   *
   * To initiate a new subscription, the client sends a single SubscribeDataRequest message (containing a
   * NewSubscription message payload) to register the new subscription.
   *
   * The service responds with a single SubscribeDataResponse message, containing either an ExceptionalResult message
   * payload if the request is rejected by the service or an AckResult message if the service accepts the request and
   * registers the subscription.
   *
   * The service then sends a stream of SubscribeDataResponse messages, each containing a SubscribeDataResult with
   * published data for the registered PVs, until the client cancels the subscription, either by sending a
   * SubscribeDataRequest containing a CancelSubscription payload or by closing the API method's request stream.
   *
   * The service sends a response with an ExceptionalResult payload if it rejects the subscription request or an error
   * occurs while handling the subscription.  In either case, after sending the ExceptionalResult message the service
   * closes the API method response stream.
   *
   * If the client sends subsequent NewSubscription messages after registering the initial subscription, the service
   * sends a reject message and closes the response stream.
   */
  rpc subscribeData(stream SubscribeDataRequest) returns (stream SubscribeDataResponse);
}


//
// ------------------- Provider Registration ---------------------------
//

/*
 * RegisterProviderRequest
 *
 * Encapsulates parameters for a registerProvider() API method request.  The required providerName field uniquely
 * identifies a provider.  The other descriptive fields are optional.
 */
message RegisterProviderRequest {
  string providerName = 1; // Required provider name uniquely identifies ingestion data provider.
  string	description = 2; // optional description
  repeated string tags = 3; // optional list of keywords / tags
  repeated Attribute attributes = 4; // optional list of key/value attribute pairs
}

/*
 * RegisterProviderResponse
 *
 * Encapsulates response from registerProvider() API method.  Payload is either an ExceptionalResult message with
 * details about a rejection or error, or a RegistrationResult containing details about the provider registration
 * including provider id/name, and a flag indicating if the provider is new or previously existing.
 *
 * The providerId contained in the RegistrationResult should be used for the corresponding parameter in
 * IngestDataRequests sent to any of the data ingestion API methods.  Those methods confirm that the specified
 * providerId is valid before processing the ingestion request.
 */
message RegisterProviderResponse {

  Timestamp responseTime = 1; // Indicates time response is sent.

  oneof result {
    ExceptionalResult exceptionalResult = 10; // Payload for an unsuccessful registerProvider() request.
    RegistrationResult registrationResult = 11; // Payload for a successful registerProvider() request.
  }

  message RegistrationResult {
    string providerId = 1; // Id uniquely identifies provider, and is sent in subsequent data ingestion requests.
    string providerName = 2; // Echoed from request.
    bool isNewProvider = 3; // flag indicating if provider is determined to be new or previously existing.
  }
}


//
// ------------------- Data Ingestion ---------------------------
//

/*
 * IngestDataRequest
 *
 * Contains a set of data to be ingested. Message is used for all data ingestion API methods.
 *
 * The providerId field uniquely identifies the data ingestion provider and must be obtained via a call to the
 * registerProvider() API method.
 *
 * The clientRequestId field uniquely identifies a request for a particular providerId, so the combination of providerId and
 * requestId uniquely identifies an ingestion request and therefore the corresponding request status document. Clients
 * may use whatever notation for clientRequestId makes sense for the paricular application. NOTE that for the sake of
 * performance and simplicity, the service does not check uniqueness of incoming clientRequestId values, it is up to
 * the client to enforce uniqueness.
 *
 * The tags, attributes and eventMetadata fields are optional are optional and  used to further describe the ingested data or
 * associate it with an experiment, event, subsystem, etc.
 *
 * The required ingestionDataFrame field contains the column data vectors to be ingested.
 *
 * For maximum performance, data ingestion is an asynchronous operation.  The response for a request only indicates
 * if the request is accepted by the ingestion service.  Client (or monitoring tool) must check request status via API
 * or in database to confirm successful handling.
 */
message IngestDataRequest {
  string providerId = 1; // Required providerId must match id returned via registerProvider() API method.
  string clientRequestId = 2; // Required clientRequestId uniquely identifies an ingestion request for a provider.
  repeated string tags = 3; // Optional, list of keywords / tags.
  repeated Attribute attributes = 4; // Optional, list of key/value attributes describing the request data.
  EventMetadata eventMetadata = 5; // Optional, metadata describing event that request data are associated with.
  IngestionDataFrame ingestionDataFrame = 6; // Required, contains the data for the ingestion request.

/*
 * IngestionDataFrame
 *
 * An IngestionDataFrame contains the data for an ingestion request.  It includes a set of vectors of data and a
 * a specification of the timestamps for the values in those vectors.
 *
 * DataTimestamps can be expressed using either a SamplingClock with start time, sample period,
 * and sample count, or using a TimestampsList with an explicit list of timestamps for the data values.
 *
 * Each DataColumn is a vector of data values for a particular PV, with a single data value for each
 * data timestamp.
 *
 * For maximum performance, the client can optionally provide a list of SerializedDataColumn objects instead of
 * regular DataColumn objects.  Each SerializedDataColumn which contains the bytes for a serialized DataColumn object.
 * This avoids extra deserialization / re-serialization operations performed by the gRPC communication framework
 * in the client and Ingestion Service.
 *
 * Each data column must be the same size, with a value for each timestamp specified in dataTimestamps. Ingestion
 * requests with inconsistent dimensions are rejected. Can contain regular DataColumns and/or SerializedDataColumns,
 * and must contain at least one or the other.
 */
  message IngestionDataFrame {
    DataTimestamps dataTimestamps = 1; // Required, specifies timestamps for data values.
    repeated DataColumn dataColumns = 2; // Optional list of columns, each containing a data value for each timestamp.
    repeated SerializedDataColumn serializedDataColumns = 3; // Optional list of serialized DataColumn objects for maximum performance.
  }
}

/*
 * IngestDataResponse
 *
 * Encapsulates response to a particular ingestion request. Message is used for both unary and bidirectional streaming
 * data ingestion API methods (ingestData() and ingestDataBidiStream().
 *
 * The providerid and clientRequestId fields in a response match the values of those fields in the corresponding
 * IngestDataRequest.
 *
 * For maximum performance, data ingestion is an asynchronous operation.  The response for a request only indicates
 * if the request is accepted by the ingestion service.  Client (or monitoring tool) must check request status via API
 * or in database to confirm successful handling.
 *
 * The Ingestion Service performs validation on receipt of an IngestDataRequest, and sends a rejection for an invalid
 * request (e.g., providerId or clientRequestId not specified, inconsistent dimensions of data timestamps and data
 * vectors in request's IngestionDataFrame, invalid providerId, etc).
 *
 * For IngestDataRequests determined to be valid, an AckResult is sent back to the client echoing the dimensions of
 * the request's IngestionDataFrame (numRows and numColumns).
 */
message IngestDataResponse {

  string providerId = 1; // providerId echoed from the corresponding IngestDataRequest.
  string clientRequestId = 2; // clientRequestid echoed from the corresponding IngestDataRequest.
  Timestamp responseTime = 3; // Indicates time response is generated.

  oneof result {
    ExceptionalResult exceptionalResult = 10; // Payload for an invalid IngestDataRequest.
    AckResult ackResult = 11; // Payload for a valid IngestDataRequest.
  }

/*
 * Acknowledgment sent for a valid IngestDataRequest, echoes the number of rows and columns in the request's
 * data frame.
 */
  message AckResult {
    uint32 numRows = 1; // Echoes number of rows in ingestion data frame.
    uint32 numColumns = 2; // Echoes number of columns in ingestion data frame.
  }
}

/*
 * IngestDataStreamResponse
 *
 * Encapsulates response to ingestDataStream() client-side streaming API method.  A single response message is sent
 * when the API method stream is closed by the client or in response to an error handling the request stream.
 *
 * All responses include the list of clientRequestIds received in the method's request stream, and a list of
 * rejectedRequestids, indicating which of the clientRequestIds received in the request stream are rejected.
 *
 * Message payload is an ExceptionalResult if any IngestDataRequest sent in the method's request stream is rejected,
 * otherwise payload is an ingestDataStreamResult with stats about the request stream.
 */
message IngestDataStreamResponse {

  Timestamp responseTime = 1; // Indicates time response is generated.
  repeated string clientRequestIds = 2; // List of clientRequestIds received in the request stream.
  repeated string rejectedRequestIds = 3; // List of clientRequestIds received in the request stream rejected by service.

  oneof result {
    ExceptionalResult exceptionalResult = 10; // Payload if any IngestDataRequest in request stream is rejected.
    IngestDataStreamResult ingestDataStreamResult = 11; // Payload if all IngestDataRequests in request stream are valid.
  }

  message IngestDataStreamResult {
    uint32 numRequests = 1; // Number of requests sent in the request stream and accepted by the service.
  }
}


//
// ------------------- Request Status ---------------------------
//

/*
 * QueryRequestStatusRequest
 *
 * Encapsulates parameters to queryRequestStatus() API method. Includes a list of criteria that can be arbitrarily
 * combined for the query filter. We envision three primary use cases:
 *
 * 1) Query by provider id or name and request id to find the status of a specific ingestion request.
 * 2) Query by provider id or name, status (e.g., rejected or error) and time range.
 * 3) Query by status and time range without specifying a provider (e.g., "find all ingestion errors for today").
 *
 * ProviderIdCriterion is used to filter by providerId (as returned by registerProvider()) and sent in the
 * IngestDataRequest.
 *
 * ProviderNameCriterion is used to filter by providerName (as sent to registerProvider()) and sent in the
 * IngestDataRequest.
 *
 * RequestIdCriterion is used to filter by clientRequestId as specified in the IngestDataRequest.
 *
 * StatusCriterion is used to filter by status indicated for the IngestDataRequest (success, rejected, or error).
 *
 * TimeRangeCriterion is used to filter by time range, matched against the time indicated for the IngestDataRequest.
 */
message QueryRequestStatusRequest {

  repeated QueryRequestStatusCriterion criteria = 1;

  message QueryRequestStatusCriterion {

    oneof criterion {
      ProviderIdCriterion providerIdCriterion = 10;
      ProviderNameCriterion providerNameCriterion = 11;
      RequestIdCriterion requestIdCriterion = 12;
      StatusCriterion statusCriterion = 13;
      TimeRangeCriterion timeRangeCriterion = 14;
    }

    message ProviderIdCriterion {
      string providerId = 1;
    }

    message ProviderNameCriterion {
      string providerName = 1;
    }

    message RequestIdCriterion {
      string requestId = 1;
    }

    message StatusCriterion {
      repeated IngestionRequestStatus status = 1;
    }

    message TimeRangeCriterion {
      Timestamp beginTime = 1;
      Timestamp endTime = 2;
    }
  }
}

/*
 * QueryRequestStatusResponse
 *
 * Encapsulates response from queryRequestStatus() API method. Payload is an ExceptionalResult if the query is rejected
 * or there is an error handling it, otherwise payload is a RequestStatusResult which contains a list of RequestStatus
 * messages, corresponding to the documents in the MongoDB "requestStatus" collection that match the specified query
 * criteria.
 *
 * Each RequestStatus message includes details from the document in the "requestStatus" collection, including a
 * unique identifier for the request status document, provider id and name, client request id, status enum value,
 * status message, and a list of idsCreated in the MongoDB "buckets" collection for the request's data.
 */
message QueryRequestStatusResponse {

  Timestamp responseTime = 1; // Indicates time response was generated.

  oneof result {
    ExceptionalResult exceptionalResult = 10;
    RequestStatusResult requestStatusResult = 11;
  }

  message RequestStatusResult {

    repeated RequestStatus requestStatus = 1;

    message RequestStatus {
      string requestStatusId = 1;
      string providerId = 2;
      string providerName = 3;
      string requestId = 4;
      IngestionRequestStatus ingestionRequestStatus = 5;
      string statusMessage = 6;
      repeated string idsCreated = 7;
      Timestamp updateTime = 8;
    }
  }
}

enum IngestionRequestStatus {
  INGESTION_REQUEST_STATUS_SUCCESS = 0;
  INGESTION_REQUEST_STATUS_REJECTED = 1;
  INGESTION_REQUEST_STATUS_ERROR = 2;
}


//
// ------------------- Ingestion Stream Data Monitoring ---------------------------
//

/*
 * SubscribeDataRequest
 *
 * The client sends SubscribeDataRequest messages in the request stream for the subscribeData() API method.
 * Each message can contain one of two message payloads, either a NewSubscription message or a CancelSubscription
 * message.
 *
 * The NewSubscription message contains a list of PVs to be included in the data subscription.
 *
 * The CancelSubscription message is an empty message that simply indicates the client wishes to end the subscription.
 */
message SubscribeDataRequest {

  oneof request {
    NewSubscription newSubscription = 10;
    CancelSubscription cancelSubscription = 11;
  }

  message NewSubscription {
    repeated string pvNames = 1;
  }

  message CancelSubscription {
    // empty message sent to cancel subscription
  }
}

/*
 * SubscribeDataResponse
 *
 * The service sends SubscribeDataResponse messages in the response stream for the subscribeData() method.
 * Each response contains one of three payload messages.  1) An ExceptionalResult payload is sent if the service
 * rejects the subscription request or an error occurs while processing the subscription. 2) An AckResult payload is
 * sent when the service accepts a subscription request.  3) A SubscribeDataResult is sent when the service publishes
 * new data for any of the PVs registered for the subscription.
 *
 * Each SubscribeDataResult message payload contains a DataTimestamps message, specifying the timestamps for the
 * included data values (either using a SamplingClock or explicit list of timestamps), and lists of either regular
 * DataColumns or SerializedDataColumns (or both), determined by the contents of the ingestion request being published,
 * e.g., if the IngestDataRequest message contains SerializedDataColumns, so will SubscribeDataResponse messages.
 * For maximum performance, it is advised to use SerializedDataColumns for ingestion and query API methods.
 */
message SubscribeDataResponse {

  Timestamp responseTime = 1; // Indicates time response is generated.

  oneof result {
    ExceptionalResult exceptionalResult = 10;
    AckResult ackResult = 11;
    SubscribeDataResult subscribeDataResult = 12;
  }

  message AckResult {
    // empty message sent to confirm subscription
  }

  message SubscribeDataResult {
    DataTimestamps dataTimestamps = 1; // Specifies timestamps for DataColumn values.
    repeated DataColumn dataColumns = 2; // List of PV column vectors, each containing a data value for each timestamp.
    repeated SerializedDataColumn serializedDataColumns = 3; // List of serialized DataColumn objects for maximum performance.
  }

}
